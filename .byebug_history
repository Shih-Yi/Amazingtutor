c
cc
c
t.ten_fee_exchange_to(current_user.currency)/10
t.ten_fee_exchange_to(current_user.currency)
ct.ten_fee_exchange_to(current_user.currency)
c
t.ten_fee/10
t.ten_fee
c
cc
unless current_user
c
current_user
t.one_fee_exchange_to(current_user.currency)
t.one_fee
number_to_currency(t.one_fee_exchange_to(current_user.currency)
number_to_currency(t.ten_fee,precision: 2 )
number_to_currency(t.ten_fee_exchange_to(current_user.currency)
number_to_currency(t.ten_fee_exchange_to(current_user.currency)/10
number_to_currency(t.ten_fee,precision: 2 )
number_to_currency(t.ten_fee/10,precision: 2 )
t.ten_fee/10
t.one_fee
t.ten_fee/10
if t.ten_fee/10 < t.one_fee
c
t.one_fee_exchange_to('TWD')/10
t.one_fee_exchange_to('TWD')
t.one_fee_exchange_to(TWD)
t.one_fee
t.ten_fee/10
t.ten_fee
c
<<<<<<< HEAD
t
c
t.one_fee_exchange_to('TWD')
t.one_fee_exchange_to(TWD)
t
t.one_fee_exchange_to(current_user.currency)
t
User.find 34
t
t.name
t
t.one_fee_exchange_to(current_user.currency)
c
t.ten_fee
c
current_user.currency
current_user
t.ten_fee
c
t.ten_fee
params
c
Money::Currency.find_by_iso_numeric(901)
@c
c
Money.new(1000,'TWD').exchange_to('USD')
 Money::Currency.find_by_iso_numeric(901)
@c
c
Money::Currency.find_by_iso_numeric(901)
@c
c
currency
c
currency
c
currency
c
currency
c
currency
c
@x
c
@x
c
@x
c
@x
c
      currency.iso_code
c
      currency.iso_code
c
Money.class
@money.class
@money
c
=======
<<<<<<< HEAD
@teachers.count
@teachers
c
@teachers.count
=======
>>>>>>> 672ff52fd9e754c84862d3df58cdfa303dc80155
params[:teacher][:ten_fee].to_i*10
params[:teacher][:ten_fee].to_i
params[:teacher][:ten_fee]
>>>>>>> b58cb7161b1f50db6f5af71b04457ed40f5626bf
=======
Time.now.in_time_zone
Time.now
Time.current
Time.current.in_time_zone
Time.current.in_time_zone 
>>>>>>> calendar
c
Time.current.in_time_zone + 12.hours
Time.current
Time.current.in_time_zone
@days
c
 @available_section_times.select{|x| x unless self.appointment_check(x[0], x[1])}
c
 @available_section_times.select
c
@available_section_times.select{|x|  x unless self.appointment_check(x[0], x[1])}c
@available_section_times.select{|x|  x unless self.appointment_check(x[0], x[1])}
@available_section_times.map{|x|  x unless self.appointment_check(x[0], x[1])}
@available_section_times.map{|x|  !(self.appointment_check(x[0], x[1]))}
c
@available_section_times.map{|x|  !(self.appointment_check(x[0], x[1]))}
c
self
 #<Teacher:0x007f8c841b1ff8>
self.appointment_check("Fri, 03 Jun 2016 15:00:00 BST +01:00"," Fri, 03 Jun 2016 16:00:00 BST +01:00")
self.appointment_check(Fri, 03 Jun 2016 15:00:00 BST +01:00, Fri, 03 Jun 2016 16:00:00 BST +01:00)
@available_section_times
@available_section_times.uniq.select{|x| x[0]>= Time.current.in_time_zone+12.hours }
@available_section_times.uniq.select{|x| [x[0],x[1]] if x[0]>= Time.current.in_time_zone+12.hours }
c
@available_section_times.map{|x|  !(self.appointment_check(x[0], x[1]))}
self
@available_section_times
c
@available_section_times.uniq.map{|x| }c
@available_section_times.uniq
c
params
c
params
c
@times
c
@teacher.find_available_times(@selected)
@selected
@times
c
available_sections
available_section
c
available_sections
c
available_sections
c
available_section
available_sections
c
@times
c
@times
c
#<Teacher:0x007fceacc8e510>
params[:tid]
c
@times = Teacher.find(348).find_available_times(@selected)
@teacher
c
@times
c
available_sections
 @available_section_times
c
self.available_sections
available_sections
available_section
available_sections
c
Teacher.find(348).find_available_times(@selected)
c
cc
Teachers
available_section
((available_section.end - available_section.start) / 24.hours).to_i+1
@pickedday
@pickedday_start
c
 @times = Teacher.find(348).find_available_times(@selected)
c
@selected
Teacher.find(348).find_available_times("Sun, 3 Jun 2016",2)
c
Teacher.find(348).find_available_times("Sun, 3 Jun 2016",2)
Teacher.find(348).find_available_times(@selected)
@selected
Teacher.find(348).find_available_times(@selected)
@times
c
Teacher.find(348).find_available_times(@selected)
c
Teacher.find(348).find_available_times(@selected)
find_available_times(@selected)
@selected
c
((available_section.end - available_section.start) / 24.hours).to_i
@pickedday.to_date
@forday
@forday == @pickedday.to_date
available_section
c
available_section
@available_section_times
c
@available_section_times
available_section
c
available_section
c
available_section
cc
c
available_section
@available_section_times
c
@available_section_times
c
@available_section_times
available_section
c
available_section
c
available_section
c
available_section
x = @pickedday_start
@available_section_times
          end
            @available_section_times.pop if section == 2
            end
                x += 30.minute
              @available_section_times << [ x , x + (section* 30.minute)]
            for i in 0..block
            x = @pickedday_start
            block = ((available_section.end - @pickedday_start) / 30.minute).to_i - 1
if available_section.end > @pickedday_start && available_section.end <= @pickedday_end && available_section.start < @pickedday_start
rails c
                x += 30.minute
              @available_section_times << [ x , x + (section* 30.minute)]
              @available_section_times << [ x , x + (section* 30.minute)]for i in 0..block
for i in 0..block
