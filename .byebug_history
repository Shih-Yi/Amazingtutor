c
((available_section.end - available_section.start) / 24.hours).to_i
@pickedday.to_date
@forday
@forday == @pickedday.to_date
available_section
c
available_section
@available_section_times
c
@available_section_times
available_section
c
available_section
c
available_section
cc
c
available_section
@available_section_times
c
@available_section_times
c
@available_section_times
available_section
c
available_section
c
available_section
c
available_section
x = @pickedday_start
@available_section_times
          end
            @available_section_times.pop if section == 2
            end
                x += 30.minute
              @available_section_times << [ x , x + (section* 30.minute)]
            for i in 0..block
            x = @pickedday_start
            block = ((available_section.end - @pickedday_start) / 30.minute).to_i - 1
if available_section.end > @pickedday_start && available_section.end <= @pickedday_end && available_section.start < @pickedday_start
rails c
                x += 30.minute
              @available_section_times << [ x , x + (section* 30.minute)]
              @available_section_times << [ x , x + (section* 30.minute)]for i in 0..block
for i in 0..block
@available_section_times
@available_section_times.pop if section == 2
            end
                x += 30.minute
              @available_section_times << [ x , x + (section* 30.minute)]
  for i in 0..block
x = @pickedday_start
block = ((available_section.end - @pickedday_start) / 30.minute).to_i - 1
((available_section.end - @pickedday_start) / 30.minute).to_i - 1
block
@pickedday_start
available_section.end
@pickedday_end
available_section.end
@pickedday_start
available_section.start
available_section.start >= @pickedday_start && available_section.end < @pickedday_end
available_section.end > @pickedday_start && available_section.end <= @pickedday_end && available_section.start < @pickedday_start
available_section
c
available_section
c
available_section
c
available_section
c
available_section
c
available_section
c
available_section
c
available_section
c
available_section
c
available_section
c
available_section
c
available_section
c
v
available_section
available_sectionc
cavailable_section
available_sectionc
c
available_section
c
available_section
c
@available_section_times
available_section.start >= @pickedday_start && available_section.end < @pickedday_end
available_section
c
@available_section_times
available_section.start >= @pickedday_start && available_section.end < @pickedday_end
available_section
c
available_section
c
available_section
c
available_section.start >= @pickedday_start && available_section.start < @pickedday_end && available_section.end > @pickedday_end
available_section.end > @pickedday_start && available_section.end <= @pickedday_end && available_section.start < @pickedday_start
available_section.start >= @pickedday_start && available_section.start < @pickedday_end && available_section.end > @pickedday_end
c
available_section.start >= @pickedday_start && available_section.start < @pickedday_end && available_section.end > @pickedday_end
available_section.end > @pickedday_start && available_section.end <= @pickedday_end && available_section.end < @pickedday_start
 available_section.start <  @pickedday_start && available_section.end > @pickedday_end
available_section.start >= @pickedday_start && available_section.end < @pickedday_end 
available_section.start >= @pickedday_start && available_section.start < @pickedday_end
available_section.start >= @pickedday_start && available_section.end < @pickedday_end
available_section.end > @pickedday_start && available_section.end <= @pickedday_end
available_section.start <  @pickedday_start && available_section.end > @pickedday_end
block = (((@pickedday_end + 1) - available_section.start) / 30.minute).to_i - 1
available_section.start >= @pickedday_start && available_section.start < @pickedday_end
pickedday
@available_section_times
c
available_section.select(:start, :start).where('start > ? AND start < ?', @pickedday_start, @pickedday_end)
@forday == @pickedday.to_date
c
@available_section_times
c
params[:teacher][:ten_fee].to_i*10
params[:teacher][:ten_fee].to_i
params[:teacher][:ten_fee]
c
cookies[:week]
cookies[:lan]
c
cookies[:week]
cookies[:lan]
c
  cookies[:lan]
  cookies[:week]
c
  cookies[:lan]
  cookies[:week]
c
  cookies[:lan]
  cookies[:week]
c
@teachera
c
cookies[:weektest].blank?
cookies[:weektest]
cookies[:lantest]
c
cookies[:lantest].blank? 
cookies[:lantest] 
cookies[:lantest] = nil
cookies[:lantest]
cookies[:weektest]
cookies[:weektest].nil?
c
cookies[:weektest].nil?
cookies[:weektest]
cookies[:lantest]
c
cookies[:weektest]
cookies[:lantest]
c
cookies[:lantest]
cookies[:weektest]
c
cookies[:weektest]
cookies[:lantest]
c
cookies[:weektest]
cookies[:lantest]
c
cookies[:lantest]
cookies[:weektest]
c
cookies[:weektest]
c
cookies[:weektest]
c
cookies[:weektest]
cookies[:lantest]
c
cookies[:test]
cookies[:lantest]
cookies[:weektest]
c
cookies[:weektest]
cookies[:lantest]
cookies[:test]
c
cookies[:test]
cookies[:lantest]
cookies[:weektest]
cookies
cookis
c
@teachers.ids 
@teacherc.ids 
@teacherb.ids 
@teachera.ids 
@teachera 
Teacher.includes(:teacher_languageships).where(teacher_languageships: { language_id: nil }).uniq
Teacher.includes(:teacher_languageships).where(teacher_languageships: { language_id: @lan_id }).uniq
params[:language_id]
c
@teachera.ids
@teachera
@teacherb
c
Teacher.uniq.ids
Teacher.uniq
Teacher.includes(:teacher_languageships).where(teacher_languageships: { language_id: @lan_id }).uniq.ids
Teacher.includes(:teacher_languageships).where(teacher_languageships: { language_id: @lan_id }).uniq
Teacher.includes(:teacher_languageships).where(teacher_languageships: { language_id: @lan_id })
Teacher.all.ids
Teacher
@teachers.ids
@teachera.ids
c
@teachera.ids
@teachera
c
@teachers.id
@teachers.ids
@teachers
@teachers.ids
@teacherb.ids
@teachera.ids
@teachera
c
@teachers
@teacherb.ids
@teachera.ids
@teachera
@teachera.ids
@teachera
c
@teachers
@teacherss
@teacherb
@teachera
@teacher
c
@teachers.ids
@teachers.idds
@teachers
@teachera.ids
