c
Teacher.where('ten_fee/10 >= ? AND one_fee <= ?', @pricefir, @pricesec)
@teachers.size
@teachers
c
Teacher.where('ten_fee/10 >= ? AND one_fee <= ?', @pricefir, @pricesec).size
@teachers.size
c
@teachers.size
c
@teachers.size
c
@teachers.size
c
@teachers.size
c
@teachers.size
@teachers.size.size.size
@teachers.size.size
@teachers.size
c
@teachers.size
@teachers
c
@teachers.size
@teachers
c
cc
  @teachers
c
@teachers.size
@teachers.szie
@teachers
c
      byebug
c
@teachers
c
Teacher.where('ten_fee/10 >= ? AND one_fee <= ?', 450, 500)
Teacher.where('ten_fee/10 >= ? AND one_fee <= ?', @pricefir, @pricesec)
@teachers
c
event_reuslt
limit = Time.current.in_time_zone + 12.hours
c
event_reuslt
event_reuslt.each {|a|a[:start]= limit if !(a[:start]< limit && a[:end]>limit)}
event_reuslt
event_reuslt.each {|a|a[:start]= limit if !(a[:start]< limit && a[:end]>limit)}
event_reuslt
limit = Time.current.in_time_zone + 12.hours
c
event_reuslt.map {|a|a if !(a[:start]< limit && a[:end]<limit) }
event_reuslt
event_reuslt.each {|a|a[:start]= limit if !(a[:start]< limit && a[:end]>limit) }
event_reuslt.map {|a|a[:start]= limit if !(a[:start]< limit && a[:end]>limit) }
limit = Time.current.in_time_zone + 12.hours
c
        event_reuslt.map {|a|a if !(a[:start]< limit && a[:end]<limit) }.compact
        event_reuslt.map {|a|a if !(a[:start]< limit && a[:end]<limit) }
limit = Time.current.in_time_zone + 12.hours
c
        event_reuslt.map! {|a|a if !(a[:start]< limit && a[:end]<limit) }
limit = Time.current.in_time_zone + 12.hours
        event_reuslt.map! {|a|a if !(a[:start]< limit && a[:end]<limit) }
a = event_reuslt.map! {|a|a if !(a[:start]< limit && a[:end]<limit) }
 event_reuslt.map! {|a|a if !(a[:start]< limit && a[:end]<limit) }.compact
        event_reuslt.map! {|a|a if !(a[:start]< limit && a[:end]<limit) }
limit = Time.current.in_time_zone + 12.hours
event_reusltevent_reuslt.map! {|a|a if !(a[:start]< limit && a[:end]<limit) }
event_reuslt
 limit = Time.current.in_time_zone + 12.hours
c
event_reuslt
c
event_reuslt.map {|a|a if !(a[:start]< limit && a[:end]<limit) }
limit = Time.current.in_time_zone + 12.hours
event_reuslt.map{|a| a if a[:start]< limit && a[:end]<limit }
event_reuslt.map{|a| a if !(a[:start]< limit && a[:end]<limit) }
event_reuslt.map{|a|a if !(a[:start]< limit && a[:end]<limit) }
event_reuslt.map {|a|a if !(a[:start]< limit && a[:end]<limit) }
c
event_reuslt.map{|a| a if !(a[:start]<limit && a[:end]< limit)}.compactc
event_reuslt.map{|a| a if !(a[:start]<limit && a[:end]< limit)}.compact
event_reuslt.map{|a| a if (a[:start]<limit && a[:end]< limit)}.compact
event_reuslt.map{|a| a if (a[:start]<limit && a[:end]< limit)}
event_reuslt.map{|a| x if (a[:start]<limit && a[:end]< limit)}
event_reuslt.map{|a| (a[:start]<limit && a[:end]< limit)}
event_reuslt.map{|a|a[:start]<limit}
event_reuslt.map{|a|a[:id]}
event_reuslt.map{|a|a[:id]&& 1}
event_reuslt.map{|a|1&&a[:end]}
event_reuslt.map{|a|a[:id]&&a[:end]}
event_reuslt.map{|a|a[:start]&&a[:end]}
event_reuslt.map{|a|[a[:start]&&a[:end]]}
event_reuslt.map{|a|{a[:start]&&a[:end]}}
event_reuslt.map{|a|a[:start]&&a[:end]}
event_reuslt.map{|a|a}
event_reuslt
event_reuslt.map {|k| !(k[:start]< limit && [:end]<limit) }
event_reuslt.map {|k| !(k[:start]< limit && l[:end]<limit) }
  limit = Time.current.in_time_zone + 12.hours
limit
c
event_reuslt[0]
event_reuslt[0][:start]
event_reuslt[0].id
event_reuslt[0][0]
event_reuslt[0][1]
event_reuslt[0]
event_reuslt
c
set_appointment_params
appointment
c
Time.now.in_time_zone
appointment.start-12.hours
appointment.start-12.hours< Time.now.in_time_zone
appointment
self.start-12.hours< Time.now.in_time_zone
appointment.check_and_destroy!
c
appointment.check_and_destroy!
current_user.appointments.find_by_id(destroy_appointment_params[:id])
c
destroy_appointment_params[:id]
c
params
c
params
c
params
c
x
block
c
-appointment_params[:start].utc_offset
appointment_params[:start].utc_offset
appointment_params.start.utc_offset
appointment_params
c
Time.now.in_time_zone
Time.now
Time.current
Time.current.in_time_zone
Time.current.in_time_zone 
c
Time.current.in_time_zone + 12.hours
Time.current
Time.current.in_time_zone
@days
c
 @available_section_times.select{|x| x unless self.appointment_check(x[0], x[1])}
c
 @available_section_times.select
c
@available_section_times.select{|x|  x unless self.appointment_check(x[0], x[1])}c
@available_section_times.select{|x|  x unless self.appointment_check(x[0], x[1])}
@available_section_times.map{|x|  x unless self.appointment_check(x[0], x[1])}
@available_section_times.map{|x|  !(self.appointment_check(x[0], x[1]))}
c
@available_section_times.map{|x|  !(self.appointment_check(x[0], x[1]))}
c
self
 #<Teacher:0x007f8c841b1ff8>
self.appointment_check("Fri, 03 Jun 2016 15:00:00 BST +01:00"," Fri, 03 Jun 2016 16:00:00 BST +01:00")
self.appointment_check(Fri, 03 Jun 2016 15:00:00 BST +01:00, Fri, 03 Jun 2016 16:00:00 BST +01:00)
@available_section_times
@available_section_times.uniq.select{|x| x[0]>= Time.current.in_time_zone+12.hours }
@available_section_times.uniq.select{|x| [x[0],x[1]] if x[0]>= Time.current.in_time_zone+12.hours }
c
@available_section_times.map{|x|  !(self.appointment_check(x[0], x[1]))}
self
@available_section_times
c
@available_section_times.uniq.map{|x| }c
@available_section_times.uniq
c
params
c
params
c
@times
c
@teacher.find_available_times(@selected)
@selected
@times
c
available_sections
available_section
c
available_sections
c
available_sections
c
available_section
available_sections
c
@times
c
@times
c
#<Teacher:0x007fceacc8e510>
params[:tid]
c
@times = Teacher.find(348).find_available_times(@selected)
@teacher
c
@times
c
available_sections
 @available_section_times
c
self.available_sections
available_sections
available_section
available_sections
c
Teacher.find(348).find_available_times(@selected)
c
cc
Teachers
available_section
((available_section.end - available_section.start) / 24.hours).to_i+1
@pickedday
@pickedday_start
c
 @times = Teacher.find(348).find_available_times(@selected)
c
@selected
Teacher.find(348).find_available_times("Sun, 3 Jun 2016",2)
c
Teacher.find(348).find_available_times("Sun, 3 Jun 2016",2)
Teacher.find(348).find_available_times(@selected)
@selected
Teacher.find(348).find_available_times(@selected)
@times
c
Teacher.find(348).find_available_times(@selected)
c
Teacher.find(348).find_available_times(@selected)
find_available_times(@selected)
@selected
c
((available_section.end - available_section.start) / 24.hours).to_i
@pickedday.to_date
@forday
@forday == @pickedday.to_date
available_section
c
available_section
@available_section_times
c
@available_section_times
available_section
c
